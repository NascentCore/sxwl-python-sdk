# coding: utf-8

"""
    调度器服务

    调度器服务的接口定义

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Union
from typing import Optional, Set
from typing_extensions import Self

class UserBilling(BaseModel):
    """
    UserBilling
    """ # noqa: E501
    billing_id: StrictStr = Field(description=" 账单ID")
    user_id: StrictStr = Field(description=" 用户ID")
    amount: Union[StrictFloat, StrictInt] = Field(description=" 消费金额")
    billing_status: StrictInt = Field(description=" 账单状态（0 未支付、1 已支付、2 欠费） TODO 返回字符串")
    job_id: StrictStr = Field(description=" 关联任务id")
    job_type: StrictStr = Field(description=" 关联任务类型（例如：finetune、inference）")
    billing_time: StrictStr = Field(description=" 账单生成时间")
    payment_time: StrictStr = Field(description=" 支付时间")
    description: StrictStr = Field(description=" 账单描述（可选，详细说明此次费用的具体内容）")
    __properties: ClassVar[List[str]] = ["billing_id", "user_id", "amount", "billing_status", "job_id", "job_type", "billing_time", "payment_time", "description"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of UserBilling from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of UserBilling from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "billing_id": obj.get("billing_id"),
            "user_id": obj.get("user_id"),
            "amount": obj.get("amount"),
            "billing_status": obj.get("billing_status"),
            "job_id": obj.get("job_id"),
            "job_type": obj.get("job_type"),
            "billing_time": obj.get("billing_time"),
            "payment_time": obj.get("payment_time"),
            "description": obj.get("description")
        })
        return _obj


