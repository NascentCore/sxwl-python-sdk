# coding: utf-8

"""
    调度器服务

    调度器服务的接口定义

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List
from openapi_client.models.cpu_info import CPUInfo
from openapi_client.models.disk_info import DiskInfo
from openapi_client.models.gpu_info import GPUInfo
from openapi_client.models.mem_info import MemInfo
from openapi_client.models.network_info import NetworkInfo
from typing import Optional, Set
from typing_extensions import Self

class NodeInfo(BaseModel):
    """
    NodeInfo
    """ # noqa: E501
    cpu_info: CPUInfo
    linux_dist: StrictStr
    gpu_info: GPUInfo
    gpu_total: StrictInt
    gpu_allocatable: StrictInt
    network_info: NetworkInfo
    kernel_version: StrictStr
    disk_info: DiskInfo
    name: StrictStr
    mem_info: MemInfo
    arch: StrictStr
    status: StrictStr
    __properties: ClassVar[List[str]] = ["cpu_info", "linux_dist", "gpu_info", "gpu_total", "gpu_allocatable", "network_info", "kernel_version", "disk_info", "name", "mem_info", "arch", "status"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of NodeInfo from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of cpu_info
        if self.cpu_info:
            _dict['cpu_info'] = self.cpu_info.to_dict()
        # override the default output from pydantic by calling `to_dict()` of gpu_info
        if self.gpu_info:
            _dict['gpu_info'] = self.gpu_info.to_dict()
        # override the default output from pydantic by calling `to_dict()` of network_info
        if self.network_info:
            _dict['network_info'] = self.network_info.to_dict()
        # override the default output from pydantic by calling `to_dict()` of disk_info
        if self.disk_info:
            _dict['disk_info'] = self.disk_info.to_dict()
        # override the default output from pydantic by calling `to_dict()` of mem_info
        if self.mem_info:
            _dict['mem_info'] = self.mem_info.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of NodeInfo from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "cpu_info": CPUInfo.from_dict(obj["cpu_info"]) if obj.get("cpu_info") is not None else None,
            "linux_dist": obj.get("linux_dist"),
            "gpu_info": GPUInfo.from_dict(obj["gpu_info"]) if obj.get("gpu_info") is not None else None,
            "gpu_total": obj.get("gpu_total"),
            "gpu_allocatable": obj.get("gpu_allocatable"),
            "network_info": NetworkInfo.from_dict(obj["network_info"]) if obj.get("network_info") is not None else None,
            "kernel_version": obj.get("kernel_version"),
            "disk_info": DiskInfo.from_dict(obj["disk_info"]) if obj.get("disk_info") is not None else None,
            "name": obj.get("name"),
            "mem_info": MemInfo.from_dict(obj["mem_info"]) if obj.get("mem_info") is not None else None,
            "arch": obj.get("arch"),
            "status": obj.get("status")
        })
        return _obj


