# coding: utf-8

"""
    调度器服务

    调度器服务的接口定义

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Union
from typing import Optional, Set
from typing_extensions import Self

class UserRecharge(BaseModel):
    """
    UserRecharge
    """ # noqa: E501
    id: StrictInt = Field(description=" ID")
    recharge_id: StrictStr = Field(description=" 充值记录id")
    user_id: StrictStr = Field(description=" 用户ID")
    amount: Union[StrictFloat, StrictInt] = Field(description=" 充值金额")
    before_balance: Union[StrictFloat, StrictInt] = Field(description=" 充值前余额")
    after_balance: Union[StrictFloat, StrictInt] = Field(description=" 充值后余额")
    description: StrictStr = Field(description=" 描述")
    created_at: StrictStr = Field(description=" 创建时间")
    updated_at: StrictStr = Field(description=" 更新时间")
    __properties: ClassVar[List[str]] = ["id", "recharge_id", "user_id", "amount", "before_balance", "after_balance", "description", "created_at", "updated_at"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of UserRecharge from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of UserRecharge from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "recharge_id": obj.get("recharge_id"),
            "user_id": obj.get("user_id"),
            "amount": obj.get("amount"),
            "before_balance": obj.get("before_balance"),
            "after_balance": obj.get("after_balance"),
            "description": obj.get("description"),
            "created_at": obj.get("created_at"),
            "updated_at": obj.get("updated_at")
        })
        return _obj


