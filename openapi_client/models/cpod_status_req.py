# coding: utf-8

"""
    调度器服务

    调度器服务的接口定义

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, StrictStr
from typing import Any, ClassVar, Dict, List
from openapi_client.models.app_job_status import AppJobStatus
from openapi_client.models.inference_status import InferenceStatus
from openapi_client.models.job_status import JobStatus
from openapi_client.models.jupyterlab_status import JupyterlabStatus
from openapi_client.models.resource_info import ResourceInfo
from typing import Optional, Set
from typing_extensions import Self

class CPODStatusReq(BaseModel):
    """
    CPODStatusReq
    """ # noqa: E501
    job_status: List[JobStatus]
    inference_status: List[InferenceStatus]
    jupyter_status: List[JupyterlabStatus]
    app_job_status: List[AppJobStatus]
    resource_info: ResourceInfo
    update_time: StrictStr
    cpod_id: StrictStr
    __properties: ClassVar[List[str]] = ["job_status", "inference_status", "jupyter_status", "app_job_status", "resource_info", "update_time", "cpod_id"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of CPODStatusReq from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in job_status (list)
        _items = []
        if self.job_status:
            for _item_job_status in self.job_status:
                if _item_job_status:
                    _items.append(_item_job_status.to_dict())
            _dict['job_status'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in inference_status (list)
        _items = []
        if self.inference_status:
            for _item_inference_status in self.inference_status:
                if _item_inference_status:
                    _items.append(_item_inference_status.to_dict())
            _dict['inference_status'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in jupyter_status (list)
        _items = []
        if self.jupyter_status:
            for _item_jupyter_status in self.jupyter_status:
                if _item_jupyter_status:
                    _items.append(_item_jupyter_status.to_dict())
            _dict['jupyter_status'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in app_job_status (list)
        _items = []
        if self.app_job_status:
            for _item_app_job_status in self.app_job_status:
                if _item_app_job_status:
                    _items.append(_item_app_job_status.to_dict())
            _dict['app_job_status'] = _items
        # override the default output from pydantic by calling `to_dict()` of resource_info
        if self.resource_info:
            _dict['resource_info'] = self.resource_info.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of CPODStatusReq from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "job_status": [JobStatus.from_dict(_item) for _item in obj["job_status"]] if obj.get("job_status") is not None else None,
            "inference_status": [InferenceStatus.from_dict(_item) for _item in obj["inference_status"]] if obj.get("inference_status") is not None else None,
            "jupyter_status": [JupyterlabStatus.from_dict(_item) for _item in obj["jupyter_status"]] if obj.get("jupyter_status") is not None else None,
            "app_job_status": [AppJobStatus.from_dict(_item) for _item in obj["app_job_status"]] if obj.get("app_job_status") is not None else None,
            "resource_info": ResourceInfo.from_dict(obj["resource_info"]) if obj.get("resource_info") is not None else None,
            "update_time": obj.get("update_time"),
            "cpod_id": obj.get("cpod_id")
        })
        return _obj


