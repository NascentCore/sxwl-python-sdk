# coding: utf-8

"""
    调度器服务

    调度器服务的接口定义

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.jupyter_resource import JupyterResource
from typing import Optional, Set
from typing_extensions import Self

class JupyterlabCreateReq(BaseModel):
    """
    JupyterlabCreateReq
    """ # noqa: E501
    id: Optional[StrictInt] = None
    job_name: Optional[StrictStr] = None
    instance_name: Optional[StrictStr] = None
    cpu_count: Optional[StrictInt] = None
    memory: Optional[StrictInt] = None
    cpod_id: Optional[StrictStr] = None
    gpu_count: Optional[StrictInt] = None
    gpu_product: Optional[StrictStr] = None
    data_volume_size: Optional[StrictInt] = None
    resource: Optional[JupyterResource] = None
    url: Optional[StrictStr] = None
    user_id: Optional[StrictStr] = None
    status: Optional[StrictStr] = None
    __properties: ClassVar[List[str]] = ["id", "job_name", "instance_name", "cpu_count", "memory", "cpod_id", "gpu_count", "gpu_product", "data_volume_size", "resource", "url", "user_id", "status"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of JupyterlabCreateReq from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of resource
        if self.resource:
            _dict['resource'] = self.resource.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of JupyterlabCreateReq from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "job_name": obj.get("job_name"),
            "instance_name": obj.get("instance_name"),
            "cpu_count": obj.get("cpu_count"),
            "memory": obj.get("memory"),
            "cpod_id": obj.get("cpod_id"),
            "gpu_count": obj.get("gpu_count"),
            "gpu_product": obj.get("gpu_product"),
            "data_volume_size": obj.get("data_volume_size"),
            "resource": JupyterResource.from_dict(obj["resource"]) if obj.get("resource") is not None else None,
            "url": obj.get("url"),
            "user_id": obj.get("user_id"),
            "status": obj.get("status")
        })
        return _obj


