# coding: utf-8

"""
    调度器服务

    调度器服务的接口定义

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class Job(BaseModel):
    """
    Job
    """ # noqa: E501
    ckpt_path: StrictStr = Field(alias="ckptPath")
    ckpt_vol: StrictStr = Field(alias="ckptVol")
    cpod_id: StrictStr = Field(alias="cpodId")
    create_time: StrictStr = Field(alias="createTime")
    dataset_name: Optional[StrictStr] = Field(default=None, alias="datasetName")
    dataset_path: Optional[StrictStr] = Field(default=None, alias="datasetPath")
    deleted: StrictInt
    gpu_number: StrictInt = Field(alias="gpuNumber")
    gpu_type: StrictStr = Field(alias="gpuType")
    image_path: StrictStr = Field(alias="imagePath")
    job_id: StrictInt = Field(alias="jobId")
    job_name: StrictStr = Field(alias="jobName")
    job_type: StrictStr = Field(alias="jobType")
    json_all: StrictStr = Field(alias="jsonAll")
    model_path: StrictStr = Field(alias="modelPath")
    model_vol: StrictStr = Field(alias="modelVol")
    obtain_status: StrictInt = Field(alias="obtainStatus")
    pretrained_model_name: Optional[StrictStr] = Field(default=None, alias="pretrainedModelName")
    pretrained_model_path: Optional[StrictStr] = Field(default=None, alias="pretrainedModelPath")
    run_command: Optional[StrictStr] = Field(default=None, alias="runCommand")
    stop_time: StrictInt = Field(alias="stopTime")
    stop_type: StrictInt = Field(alias="stopType")
    update_time: StrictStr = Field(alias="updateTime")
    user_id: StrictStr = Field(alias="userId")
    work_status: StrictInt = Field(alias="workStatus")
    status: StrictStr
    tensor_url: StrictStr
    __properties: ClassVar[List[str]] = ["ckptPath", "ckptVol", "cpodId", "createTime", "datasetName", "datasetPath", "deleted", "gpuNumber", "gpuType", "imagePath", "jobId", "jobName", "jobType", "jsonAll", "modelPath", "modelVol", "obtainStatus", "pretrainedModelName", "pretrainedModelPath", "runCommand", "stopTime", "stopType", "updateTime", "userId", "workStatus", "status", "tensor_url"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Job from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Job from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "ckptPath": obj.get("ckptPath"),
            "ckptVol": obj.get("ckptVol"),
            "cpodId": obj.get("cpodId"),
            "createTime": obj.get("createTime"),
            "datasetName": obj.get("datasetName"),
            "datasetPath": obj.get("datasetPath"),
            "deleted": obj.get("deleted"),
            "gpuNumber": obj.get("gpuNumber"),
            "gpuType": obj.get("gpuType"),
            "imagePath": obj.get("imagePath"),
            "jobId": obj.get("jobId"),
            "jobName": obj.get("jobName"),
            "jobType": obj.get("jobType"),
            "jsonAll": obj.get("jsonAll"),
            "modelPath": obj.get("modelPath"),
            "modelVol": obj.get("modelVol"),
            "obtainStatus": obj.get("obtainStatus"),
            "pretrainedModelName": obj.get("pretrainedModelName"),
            "pretrainedModelPath": obj.get("pretrainedModelPath"),
            "runCommand": obj.get("runCommand"),
            "stopTime": obj.get("stopTime"),
            "stopType": obj.get("stopType"),
            "updateTime": obj.get("updateTime"),
            "userId": obj.get("userId"),
            "workStatus": obj.get("workStatus"),
            "status": obj.get("status"),
            "tensor_url": obj.get("tensor_url")
        })
        return _obj


