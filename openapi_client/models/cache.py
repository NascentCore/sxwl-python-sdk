# coding: utf-8

"""
    调度器服务

    调度器服务的接口定义

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List
from typing import Optional, Set
from typing_extensions import Self

class Cache(BaseModel):
    """
    Cache
    """ # noqa: E501
    data_type: StrictStr
    data_name: StrictStr
    data_id: StrictStr
    data_size: StrictInt
    template: StrictStr
    data_source: StrictStr
    is_public: StrictBool
    user_id: StrictStr
    finetune_gpu_count: StrictInt
    inference_gpu_count: StrictInt
    __properties: ClassVar[List[str]] = ["data_type", "data_name", "data_id", "data_size", "template", "data_source", "is_public", "user_id", "finetune_gpu_count", "inference_gpu_count"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Cache from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Cache from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "data_type": obj.get("data_type"),
            "data_name": obj.get("data_name"),
            "data_id": obj.get("data_id"),
            "data_size": obj.get("data_size"),
            "template": obj.get("template"),
            "data_source": obj.get("data_source"),
            "is_public": obj.get("is_public"),
            "user_id": obj.get("user_id"),
            "finetune_gpu_count": obj.get("finetune_gpu_count"),
            "inference_gpu_count": obj.get("inference_gpu_count")
        })
        return _obj


