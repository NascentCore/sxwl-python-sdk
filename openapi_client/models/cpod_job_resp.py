# coding: utf-8

"""
    调度器服务

    调度器服务的接口定义

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict
from typing import Any, ClassVar, Dict, List
from openapi_client.models.app_job_info import AppJobInfo
from openapi_client.models.inference_service import InferenceService
from openapi_client.models.jupyter_lab import JupyterLab
from typing import Optional, Set
from typing_extensions import Self

class CpodJobResp(BaseModel):
    """
    CpodJobResp
    """ # noqa: E501
    job_list: List[MapStringinterface]
    inference_service_list: List[InferenceService]
    jupyter_lab_list: List[JupyterLab]
    app_job_list: List[AppJobInfo]
    __properties: ClassVar[List[str]] = ["job_list", "inference_service_list", "jupyter_lab_list", "app_job_list"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of CpodJobResp from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in job_list (list)
        _items = []
        if self.job_list:
            for _item_job_list in self.job_list:
                if _item_job_list:
                    _items.append(_item_job_list.to_dict())
            _dict['job_list'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in inference_service_list (list)
        _items = []
        if self.inference_service_list:
            for _item_inference_service_list in self.inference_service_list:
                if _item_inference_service_list:
                    _items.append(_item_inference_service_list.to_dict())
            _dict['inference_service_list'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in jupyter_lab_list (list)
        _items = []
        if self.jupyter_lab_list:
            for _item_jupyter_lab_list in self.jupyter_lab_list:
                if _item_jupyter_lab_list:
                    _items.append(_item_jupyter_lab_list.to_dict())
            _dict['jupyter_lab_list'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in app_job_list (list)
        _items = []
        if self.app_job_list:
            for _item_app_job_list in self.app_job_list:
                if _item_app_job_list:
                    _items.append(_item_app_job_list.to_dict())
            _dict['app_job_list'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of CpodJobResp from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "job_list": [MapStringinterface.from_dict(_item) for _item in obj["job_list"]] if obj.get("job_list") is not None else None,
            "inference_service_list": [InferenceService.from_dict(_item) for _item in obj["inference_service_list"]] if obj.get("inference_service_list") is not None else None,
            "jupyter_lab_list": [JupyterLab.from_dict(_item) for _item in obj["jupyter_lab_list"]] if obj.get("jupyter_lab_list") is not None else None,
            "app_job_list": [AppJobInfo.from_dict(_item) for _item in obj["app_job_list"]] if obj.get("app_job_list") is not None else None
        })
        return _obj


